%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 642
%%HiResBoundingBox: 0 0 2391.1199 642
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 642 re
W
q
[0.24 0 0 -0.24 0 642] cm
q
0 0 9962.5 2671.875 re
W*
q
[3.125434 0 0 3.124829 0.0899599 0] cm
/DeviceRGB {} CS
[0.1804 0.1686 0.1686] SC
/DeviceRGB {} cs
[0.1804 0.1686 0.1686] sc
0 0 3187.5 855.04669 re
f
Q
q
[9.0715 0 0 9.069745 293.09937 292.95276] cm
/DeviceRGB {} CS
[0.6471 0.9137 0.8824] SC
/DeviceRGB {} cs
[0.6471 0.9137 0.8824] sc
70 0 m
120 0 l
125 0 l
125 5 l
123 33 l
316 33 l
323 33 l
320 40 l
279 148 l
278 151 l
274 151 l
109 151 l
104 151 l
104 146 l
115 10 l
70 10 l
70 0 l
h
122 43 m
114 141 l
271 141 l
308 43 l
122 43 l
h
f
27 50 62 10 re
f
0 88 137 10 re
f
50 129 60 10 re
f
250 170 m
261 170 269 178 271 190 c
272 205 263 222 249 228 c
235 234 218 226 217 210 c
217 199 221 187 228 180 c
141 180 l
143 183 144 186 145 190 c
146 205 137 222 123 228 c
108 234 93 226 91 210 c
90 195 99 178 113 172 c
116 171 119 170 122 170 c
250 170 l
h
117 181 m
107 185 100 198 101 209 c
102 218 110 223 119 219 c
129 214 136 202 135 191 c
134 181 126 177 117 181 c
h
243 181 m
233 185 226 198 227 209 c
228 218 236 223 245 219 c
255 214 262 202 261 191 c
259 181 251 177 243 181 c
h
f
Q
q
[53.439606 0 0 53.429268 3809.2124 631.83344] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
5.16 5.72 m
5.4 5.72 5.9 5.74668 6.66 5.80002 c
6.66 7.92002 l
6.28666 7.88002 5.94666 7.86002 5.64 7.86002 c
5.22666 7.86002 4.94 7.95002 4.78 8.13002 c
4.619999 8.31002 4.54 8.62002 4.54 9.06002 c
4.54 9.660021 l
6.5 9.660021 l
6.5 11.56002 l
4.54 11.56002 l
4.54 20.000019 l
1.7 20.000019 l
1.7 11.56002 l
-0 11.56002 l
-0 9.660019 l
1.7 9.660019 l
1.7 8.900019 l
1.7 7.886719 2.00334 7.103319 2.61 6.550019 c
3.21666 5.996719 4.0667 5.720019 5.16 5.720019 c
5.16 5.72 l
h
12.76 9.38 m
14.413301 9.38 15.72 9.88334 16.68 10.89 c
17.639999 11.896661 18.120001 13.2134 18.120001 14.84 c
18.120001 16.479999 17.630001 17.7966 16.650002 18.790001 c
15.670002 19.783401 14.373402 20.280001 12.760002 20.280001 c
11.120002 20.280001 9.820002 19.776661 8.860003 18.77 c
7.900003 17.76334 7.420003 16.4534 7.420003 14.84 c
7.420003 13.1733 7.910003 11.8466 8.890002 10.860001 c
9.870002 9.873402 11.160002 9.380001 12.760002 9.380001 c
12.76 9.38 l
h
10.26 14.84 m
10.26 15.8933 10.47334 16.7066 10.900001 17.280001 c
11.326661 17.853401 11.946701 18.140001 12.76 18.140001 c
13.6 18.140001 14.230001 17.846661 14.650001 17.260002 c
15.070001 16.673344 15.280001 15.866702 15.280001 14.840002 c
15.280001 13.773302 15.063341 12.953302 14.630001 12.380002 c
14.196661 11.806702 13.566701 11.520002 12.740001 11.520002 c
11.940001 11.520002 11.3267 11.806663 10.900001 12.380002 c
10.473301 12.953342 10.26 13.773302 10.26 14.840002 c
10.26 14.84 l
h
24.98 9.38 m
26.633299 9.38 27.939999 9.88334 28.9 10.89 c
29.860001 11.896661 30.34 13.2134 30.34 14.84 c
30.34 16.479999 29.85 17.7966 28.870001 18.790001 c
27.890001 19.783401 26.593401 20.280001 24.980001 20.280001 c
23.340002 20.280001 22.040001 19.776661 21.080002 18.77 c
20.120003 17.76334 19.640001 16.4534 19.640001 14.84 c
19.640001 13.1733 20.130001 11.8466 21.110001 10.860001 c
22.09 9.873402 23.380001 9.380001 24.98 9.380001 c
24.98 9.38 l
h
22.48 14.84 m
22.48 15.8933 22.69334 16.7066 23.119999 17.280001 c
23.546658 17.853401 24.166698 18.140001 24.98 18.140001 c
25.82 18.140001 26.449999 17.846661 26.869999 17.260002 c
27.289999 16.673344 27.499998 15.866702 27.499998 14.840002 c
27.499998 13.773302 27.283339 12.953302 26.849998 12.380002 c
26.416658 11.806702 25.786699 11.520002 24.959999 11.520002 c
24.16 11.520002 23.5467 11.806663 23.119999 12.380002 c
22.693298 12.953342 22.48 13.773302 22.48 14.840002 c
22.48 14.84 l
h
42.259998 5.72 m
42.259998 20 l
39.559998 20 l
39.559998 18.68 l
39.519997 18.68 l
38.906658 19.7467 37.859997 20.280001 36.379997 20.280001 c
34.953297 20.280001 33.823399 19.76 32.989998 18.720001 c
32.156597 17.680002 31.739998 16.353401 31.739998 14.740002 c
31.739998 13.166701 32.163338 11.880001 33.009998 10.880001 c
33.856659 9.880001 34.959999 9.380001 36.32 9.380001 c
36.946659 9.380001 37.536701 9.510001 38.09 9.770001 c
38.643299 10.030002 39.073341 10.413342 39.380001 10.920001 c
39.420002 10.920001 l
39.420002 5.720001 l
42.260002 5.720001 l
42.259998 5.72 l
h
34.580002 14.82 m
34.580002 15.76666 34.803322 16.5567 35.249981 17.189999 c
35.69664 17.823298 36.306683 18.139999 37.079983 18.139999 c
37.893322 18.139999 38.503284 17.84334 38.909985 17.25 c
39.316685 16.65666 39.519985 15.84 39.519985 14.8 c
39.519985 13.76 39.306644 12.953301 38.879986 12.38 c
38.453327 11.8067 37.846687 11.520001 37.059986 11.520001 c
36.246647 11.520001 35.629986 11.820001 35.209988 12.42 c
34.789989 13.02 34.579987 13.82 34.579987 14.82 c
34.580002 14.82 l
h
47.32 5.72 m
47.32 8.06 l
44.48 8.06 l
44.48 5.719999 l
47.32 5.719999 l
47.32 5.72 l
h
47.32 9.66 m
47.32 20 l
44.48 20 l
44.48 9.66 l
47.32 9.66 l
h
54.34 9.38 m
55.313339 9.38 56.18 9.60664 56.939999 10.05998 c
57.699997 10.513321 58.2967 11.16998 58.73 12.029981 c
59.1633 12.889981 59.380001 13.879981 59.380001 14.999981 c
59.380001 15.106641 59.373341 15.279981 59.360001 15.519981 c
51.900002 15.519981 l
51.926662 16.346641 52.143322 16.989981 52.54998 17.449982 c
52.956638 17.909983 53.579979 18.139982 54.419979 18.139982 c
54.93998 18.139982 55.416637 18.009983 55.849979 17.749983 c
56.283321 17.489983 56.559978 17.173323 56.679981 16.799982 c
59.179981 16.799982 l
58.44664 19.119982 56.833382 20.279982 54.339981 20.279982 c
53.393322 20.266642 52.516682 20.059982 51.70998 19.659981 c
50.903278 19.259979 50.259979 18.636681 49.77998 17.78998 c
49.29998 16.943279 49.059978 15.95998 49.059978 14.83998 c
49.059978 13.78668 49.303318 12.82658 49.789978 11.95998 c
50.276638 11.09338 50.923279 10.44668 51.729977 10.01998 c
52.536674 9.593279 53.406677 9.379979 54.339977 9.379979 c
54.34 9.38 l
h
56.52 13.72 m
56.386662 12.94666 56.139999 12.386701 55.779999 12.04 c
55.419998 11.693299 54.906658 11.520001 54.239998 11.520001 c
53.546658 11.520001 52.999996 11.716661 52.599998 12.110001 c
52.200001 12.503341 51.96666 13.040001 51.899998 13.72 c
56.519997 13.72 l
56.52 13.72 l
h
72.559998 9.38 m
74.066696 9.38 75.073395 9.953321 75.579994 11.1 c
76.366653 9.953301 77.413292 9.38 78.719994 9.38 c
80.01329 9.38 80.963394 9.70666 81.569992 10.360001 c
82.17659 11.013341 82.479996 11.913301 82.479996 13.06 c
82.479996 20 l
79.639999 20 l
79.639999 14.020001 l
79.639999 13.11334 79.503342 12.4867 79.229996 12.14 c
78.95665 11.793301 78.513313 11.620001 77.899994 11.620001 c
76.633293 11.620001 75.999992 12.486661 75.999992 14.220001 c
75.999992 20 l
73.159988 20 l
73.159988 13.9 l
73.159988 13.02 73.019989 12.42 72.73999 12.099999 c
72.459991 11.779999 72.026649 11.619999 71.439987 11.619999 c
70.893326 11.619999 70.436684 11.836659 70.069984 12.269999 c
69.703285 12.703339 69.519981 13.273298 69.519981 13.979999 c
69.519981 19.999998 l
66.679977 19.999998 l
66.679977 9.659998 l
69.359978 9.659998 l
69.359978 11.059998 l
69.399979 11.059998 l
70.186638 9.939998 71.239975 9.379997 72.559982 9.379997 c
72.559998 9.38 l
h
89.480003 9.38 m
92.493401 9.39334 94 10.373301 94 12.32 c
94 17.799999 l
94 18.813299 94.120003 19.5467 94.360001 20 c
91.480003 20 l
91.373344 19.68 91.306686 19.346661 91.280022 19 c
90.440025 19.85334 89.280022 20.280001 87.800018 20.280001 c
86.720016 20.280001 85.863319 20.00666 85.230019 19.460001 c
84.596718 18.913342 84.280022 18.153301 84.280022 17.18 c
84.280022 16.233341 84.580025 15.5 85.180023 14.980001 c
85.793365 14.43334 86.906723 14.08668 88.52002 13.940001 c
89.666718 13.820001 90.393318 13.67 90.70002 13.490001 c
91.006721 13.310001 91.160019 13.033341 91.160019 12.660001 c
91.160019 12.19334 91.02002 11.846681 90.740021 11.620001 c
90.460022 11.393321 89.993362 11.280001 89.340019 11.280001 c
88.740021 11.280001 88.28672 11.40334 87.980019 11.650001 c
87.673317 11.896661 87.493355 12.293321 87.440018 12.84 c
84.600021 12.84 l
84.666679 11.7067 85.133339 10.846701 86.000023 10.26 c
86.866707 9.6733 88.026627 9.38 89.480026 9.38 c
89.480003 9.38 l
h
87.120003 17.059999 m
87.120003 17.939999 87.700005 18.379999 88.860001 18.379999 c
90.379997 18.366659 91.146599 17.586658 91.160004 16.039999 c
91.160004 14.939999 l
90.933342 15.166658 90.360001 15.333319 89.440002 15.439979 c
88.639999 15.533318 88.053299 15.696659 87.68 15.929998 c
87.306702 16.163338 87.120003 16.539999 87.120003 17.059998 c
87.120003 17.059999 l
h
102.239998 9.38 m
102.479996 9.38 102.686676 9.413341 102.860016 9.480001 c
102.860016 12.120001 l
102.553352 12.053341 102.213356 12.020001 101.840019 12.020001 c
99.97332 12.020001 99.040016 13.1267 99.040016 15.34 c
99.040016 20 l
96.200012 20 l
96.200012 9.66 l
98.900009 9.66 l
98.900009 11.58 l
98.94001 11.58 l
99.220009 10.91334 99.663353 10.38 100.270012 9.98 c
100.876671 9.579999 101.53331 9.379999 102.240013 9.379999 c
102.239998 9.38 l
h
107.580002 6.56 m
107.580025 9.66 l
109.660027 9.66 l
109.660027 11.56 l
107.580025 11.56 l
107.580025 16.68 l
107.580025 17.16 107.660027 17.48 107.820023 17.639999 c
107.980019 17.799999 108.300026 17.879999 108.780022 17.879999 c
109.126678 17.879999 109.420021 17.853338 109.660019 17.799999 c
109.660019 20.019999 l
109.260017 20.086658 108.70002 20.119999 107.980019 20.119999 c
106.886719 20.119999 106.073318 19.933338 105.540016 19.559999 c
105.006714 19.186661 104.740013 18.539999 104.740013 17.619999 c
104.740013 11.56 l
103.020012 11.56 l
103.020012 9.66 l
104.740013 9.66 l
104.740013 6.56 l
107.580017 6.56 l
107.580002 6.56 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
